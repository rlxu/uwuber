'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addDataToMapComposed = exports.updateVisDataComposed = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _compostedUpdaters; // Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _mapStateUpdaters = require('./map-state-updaters');

var _uiStateUpdaters = require('./ui-state-updaters');

var _visStateUpdaters = require('./vis-state-updaters');

var _mapStyleUpdaters = require('./map-style-updaters');

var _dataUtils = require('../utils/data-utils');

var _schemas = require('../schemas');

var _schemas2 = _interopRequireDefault(_schemas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// compose action to apply result multiple reducers, with the output of one

/**
 * Apply map bounds to mapState from received vis data
 * @param state
 * @param action {options, config: {}}
 * @returns state new reducer state
 */
var updateVisDataComposed = exports.updateVisDataComposed = function updateVisDataComposed(state, action) {
  // keep a copy of oldLayers
  var oldLayers = state.visState.layers.map(function (l) {
    return l.id;
  });

  var visState = (0, _visStateUpdaters.updateVisDataUpdater)(state.visState, action);

  var defaultOptions = {
    centerMap: true,
    // this will hide the left panel completely
    readOnly: false
  };
  var options = (0, _extends3.default)({}, defaultOptions, action.options);

  var bounds = void 0;
  if (options.centerMap) {
    // find map bounds for new layers
    var newLayers = visState.layers.filter(function (l) {
      return !oldLayers.includes(l.id);
    });
    bounds = (0, _dataUtils.findMapBounds)(newLayers);
  }

  return (0, _extends3.default)({}, state, {
    visState: visState,
    mapState: bounds ? (0, _mapStateUpdaters.fitBoundsUpdater)(state.mapState, {
      payload: bounds
    }) : state.mapState,
    uiState: (0, _extends3.default)({}, (0, _uiStateUpdaters.toggleModalUpdater)(state.uiState, { payload: null }), {
      readOnly: options.readOnly
    })
  });
};

/**
 * Combine data and full configuration update in a single action
 * @param state
 * @param action {datasets, options, config}
 * @returns state
 */
var addDataToMapComposed = exports.addDataToMapComposed = function addDataToMapComposed(state, action) {
  var _action$payload = action.payload,
      datasets = _action$payload.datasets,
      options = _action$payload.options,
      config = _action$payload.config;

  var parsedConfig = config;

  if (config && config.config && config.version) {
    // if passed in saved config
    parsedConfig = _schemas2.default.parseSavedConfig(config);
  }
  // Update visState store
  var mergedState = updateVisDataComposed(state, { datasets: datasets, options: options, config: parsedConfig && parsedConfig.visState });

  // Update mapState store
  mergedState = (0, _extends3.default)({}, mergedState, {
    mapState: (0, _mapStateUpdaters.receiveMapConfigUpdater)(mergedState.mapState, { payload: { mapState: parsedConfig && parsedConfig.mapState } })
  });

  // Update mapStyle store
  mergedState = (0, _extends3.default)({}, mergedState, {
    mapStyle: (0, _mapStyleUpdaters.receiveMapConfigUpdater)(mergedState.mapStyle, { payload: { mapStyle: parsedConfig && parsedConfig.mapStyle } })
  });

  return mergedState;
};

var compostedUpdaters = (_compostedUpdaters = {}, (0, _defineProperty3.default)(_compostedUpdaters, _actionTypes2.default.UPDATE_VIS_DATA, updateVisDataComposed), (0, _defineProperty3.default)(_compostedUpdaters, _actionTypes2.default.ADD_DATA_TO_MAP, addDataToMapComposed), _compostedUpdaters);

exports.default = compostedUpdaters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,