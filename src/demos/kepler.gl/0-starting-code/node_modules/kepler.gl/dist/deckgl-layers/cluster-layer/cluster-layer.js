'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _deck = require('deck.gl');

var _geoViewport = require('@mapbox/geo-viewport');

var _geoViewport2 = _interopRequireDefault(_geoViewport);

var _d3Array = require('d3-array');

var _utils = require('../layer-utils/utils');

var _colorRanges = require('../../constants/color-ranges');

var _layerFactory = require('../../layers/layer-factory');

var _defaultSettings = require('../../constants/default-settings');

var _clusterUtils = require('../layer-utils/cluster-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var defaultRadius = _layerFactory.LAYER_VIS_CONFIGS.clusterRadius.defaultValue;
var defaultRadiusRange = _layerFactory.LAYER_VIS_CONFIGS.clusterRadiusRange.defaultValue;

var defaultProps = {
  clusterRadius: defaultRadius,
  colorDomain: null,
  colorRange: _colorRanges.DefaultColorRange,
  colorScale: _defaultSettings.SCALE_TYPES.quantize,
  radiusRange: defaultRadiusRange,

  // maybe later...
  lowerPercentile: 0,
  upperPercentile: 100,

  getPosition: function getPosition(x) {
    return x.position;
  },

  // if want to have color based on customized aggregator, instead of count
  getColorValue: function getColorValue(points) {
    return points.length;
  },

  //  if want to have radius based on customized aggregator, instead of count
  getRadiusValue: function getRadiusValue(cell) {
    return cell.properties.point_count;
  },
  fp64: false
};

var ClusterLayer = function (_CompositeLayer) {
  (0, _inherits3.default)(ClusterLayer, _CompositeLayer);

  function ClusterLayer() {
    (0, _classCallCheck3.default)(this, ClusterLayer);
    return (0, _possibleConstructorReturn3.default)(this, (ClusterLayer.__proto__ || Object.getPrototypeOf(ClusterLayer)).apply(this, arguments));
  }

  (0, _createClass3.default)(ClusterLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        clusters: null,
        geoJSON: null
      };
    }
  }, {
    key: 'shouldUpdateState',
    value: function shouldUpdateState(_ref) {
      var changeFlags = _ref.changeFlags;

      return changeFlags.somethingChanged;
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref2) {
      var oldContext = _ref2.oldContext,
          context = _ref2.context,
          oldProps = _ref2.oldProps,
          props = _ref2.props,
          changeFlags = _ref2.changeFlags;

      if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {
        // project data into clusters, and get clustered data
        this.processGeoJSON();
        this.getClusters();

        // this needs clustered data to be set
        this.getColorValueDomain();
      } else if (this.needsReclusterPoints(oldContext, context)) {
        this.getClusters();
        this.getColorValueDomain();
      } else if (this.needsRecalculateScaleFunction(oldProps, props)) {
        this.getColorValueDomain();
      }
    }
  }, {
    key: 'needsReProjectPoints',
    value: function needsReProjectPoints(oldProps, props) {
      return oldProps.clusterRadius !== props.clusterRadius || oldProps.getPosition !== props.getPosition;
    }
  }, {
    key: 'needsReclusterPoints',
    value: function needsReclusterPoints(oldContext, context) {
      return Math.round(oldContext.viewport.zoom) !== Math.round(context.viewport.zoom);
    }
  }, {
    key: 'needsRecalculateScaleFunction',
    value: function needsRecalculateScaleFunction(oldProps, props) {
      return (0, _utils.needsRecalculateColorDomain)(oldProps, props) || (0, _utils.needReCalculateScaleFunction)(oldProps, props) || (0, _utils.needsRecalculateRadiusRange)(oldProps, props) || oldProps.getColorValue !== props.getColorValue;
    }
  }, {
    key: 'processGeoJSON',
    value: function processGeoJSON() {
      var _props = this.props,
          data = _props.data,
          getPosition = _props.getPosition;

      this.setState({ geoJSON: (0, _clusterUtils.getGeoJSON)(data, getPosition) });
      (0, _clusterUtils.clearClustererCache)();
    }
  }, {
    key: 'getClusters',
    value: function getClusters() {
      var geoJSON = this.state.geoJSON;
      var clusterRadius = this.props.clusterRadius;
      var _context = this.context,
          viewport = _context.viewport,
          _context$viewport = _context.viewport,
          longitude = _context$viewport.longitude,
          latitude = _context$viewport.latitude,
          height = _context$viewport.height,
          width = _context$viewport.width;

      // zoom needs to be an integer for the different map utils. Also helps with cache key.

      var zoom = Math.round(viewport.zoom);
      var bbox = _geoViewport2.default.bounds([longitude, latitude], zoom, [width, height]);

      var clusters = (0, _clusterUtils.clustersAtZoom)({ bbox: bbox, clusterRadius: clusterRadius, geoJSON: geoJSON, zoom: zoom });

      this.setState({ clusters: clusters });
    }
  }, {
    key: 'getColorValueDomain',
    value: function getColorValueDomain() {
      var _props2 = this.props,
          colorScale = _props2.colorScale,
          getColorValue = _props2.getColorValue,
          getRadiusValue = _props2.getRadiusValue,
          onSetColorDomain = _props2.onSetColorDomain;
      var clusters = this.state.clusters;


      var radiusDomain = [0, (0, _d3Array.max)(clusters, getRadiusValue)];

      var colorValues = clusters.map(function (d) {
        return getColorValue(d.properties.points);
      }).filter(function (n) {
        return Number.isFinite(n);
      });
      var colorDomain = colorScale === _defaultSettings.SCALE_TYPES.quantize ? (0, _d3Array.extent)(colorValues) : colorValues.sort(_d3Array.ascending);

      this.setState({
        colorDomain: colorDomain,
        radiusDomain: radiusDomain
      });

      (0, _utils.getColorScaleFunction)(this);
      (0, _utils.getRadiusScaleFunction)(this);

      onSetColorDomain(colorDomain);
    }
  }, {
    key: 'getUpdateTriggers',
    value: function getUpdateTriggers() {
      return {
        getColor: {
          colorRange: this.props.colorRange,
          colorDomain: this.props.colorDomain,
          getColorValue: this.props.getColorValue,
          colorScale: this.props.colorScale,
          lowerPercentile: this.props.lowerPercentile,
          upperPercentile: this.props.upperPercentile
        },
        getRadius: {
          radiusRange: this.props.radiusRange,
          radiusDomain: this.props.radiusDomain,
          getRadiusValue: this.props.getRadiusValue
        }
      };
    }

    /*
     * override default layer method to calculate cell color based on color scale function
     */

  }, {
    key: '_onGetSublayerColor',
    value: function _onGetSublayerColor(cell) {
      var getColorValue = this.props.getColorValue;
      var _state = this.state,
          colorScaleFunc = _state.colorScaleFunc,
          colorDomain = _state.colorDomain;


      var cv = getColorValue(cell.properties.points);

      // if cell value is outside domain, set alpha to 0
      var color = Number.isFinite(cv) && cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1] ? colorScaleFunc(cv) : [0, 0, 0, 0];

      // add final alpha to color
      color[3] = Number.isFinite(color[3]) ? color[3] : 255;

      return color;
    }
  }, {
    key: '_onGetSublayerRadius',
    value: function _onGetSublayerRadius(cell) {
      var getRadiusValue = this.props.getRadiusValue;
      var radiusScaleFunc = this.state.radiusScaleFunc;

      return radiusScaleFunc(getRadiusValue(cell));
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref3) {
      var info = _ref3.info;
      var clusters = this.state.clusters;

      var isPicked = info.picked && info.index > -1;

      var object = null;
      if (isPicked) {
        // add cluster colorValue to object
        var cluster = clusters[info.index];
        var colorValue = this.props.getColorValue(cluster.properties.points);

        object = (0, _extends3.default)({}, cluster.properties, {
          colorValue: colorValue,
          radius: this._onGetSublayerRadius(cluster),
          position: cluster.geometry.coordinates
        });
      }

      return (0, _extends3.default)({}, info, {
        picked: Boolean(object),
        // override object with picked cluster property
        object: object
      });
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      // for subclassing, override this method to return
      // customized sub layer props
      var _props3 = this.props,
          id = _props3.id,
          radiusScale = _props3.radiusScale,
          fp64 = _props3.fp64;

      // base layer props

      var _props4 = this.props,
          opacity = _props4.opacity,
          pickable = _props4.pickable;

      // return props to the sublayer constructor

      return new _deck.ScatterplotLayer({
        id: id + '-cluster',
        data: this.state.clusters,
        radiusScale: radiusScale,
        fp64: fp64,
        getPosition: function getPosition(d) {
          return d.geometry.coordinates;
        },
        getRadius: this._onGetSublayerRadius.bind(this),
        opacity: opacity,
        pickable: pickable,
        getColor: this._onGetSublayerColor.bind(this),
        updateTriggers: this.getUpdateTriggers()
      });
    }
  }]);
  return ClusterLayer;
}(_deck.CompositeLayer);

exports.default = ClusterLayer;


ClusterLayer.layerName = 'ClusterLayer';
ClusterLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNrZ2wtbGF5ZXJzL2NsdXN0ZXItbGF5ZXIvY2x1c3Rlci1sYXllci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0UmFkaXVzIiwiTEFZRVJfVklTX0NPTkZJR1MiLCJjbHVzdGVyUmFkaXVzIiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdFJhZGl1c1JhbmdlIiwiY2x1c3RlclJhZGl1c1JhbmdlIiwiZGVmYXVsdFByb3BzIiwiY29sb3JEb21haW4iLCJjb2xvclJhbmdlIiwiRGVmYXVsdENvbG9yUmFuZ2UiLCJjb2xvclNjYWxlIiwiU0NBTEVfVFlQRVMiLCJxdWFudGl6ZSIsInJhZGl1c1JhbmdlIiwibG93ZXJQZXJjZW50aWxlIiwidXBwZXJQZXJjZW50aWxlIiwiZ2V0UG9zaXRpb24iLCJ4IiwicG9zaXRpb24iLCJnZXRDb2xvclZhbHVlIiwicG9pbnRzIiwibGVuZ3RoIiwiZ2V0UmFkaXVzVmFsdWUiLCJjZWxsIiwicHJvcGVydGllcyIsInBvaW50X2NvdW50IiwiZnA2NCIsIkNsdXN0ZXJMYXllciIsInN0YXRlIiwiY2x1c3RlcnMiLCJnZW9KU09OIiwiY2hhbmdlRmxhZ3MiLCJzb21ldGhpbmdDaGFuZ2VkIiwib2xkQ29udGV4dCIsImNvbnRleHQiLCJvbGRQcm9wcyIsInByb3BzIiwiZGF0YUNoYW5nZWQiLCJuZWVkc1JlUHJvamVjdFBvaW50cyIsInByb2Nlc3NHZW9KU09OIiwiZ2V0Q2x1c3RlcnMiLCJnZXRDb2xvclZhbHVlRG9tYWluIiwibmVlZHNSZWNsdXN0ZXJQb2ludHMiLCJuZWVkc1JlY2FsY3VsYXRlU2NhbGVGdW5jdGlvbiIsIk1hdGgiLCJyb3VuZCIsInZpZXdwb3J0Iiwiem9vbSIsImRhdGEiLCJzZXRTdGF0ZSIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiaGVpZ2h0Iiwid2lkdGgiLCJiYm94IiwiZ2VvVmlld3BvcnQiLCJib3VuZHMiLCJvblNldENvbG9yRG9tYWluIiwicmFkaXVzRG9tYWluIiwiY29sb3JWYWx1ZXMiLCJtYXAiLCJkIiwiZmlsdGVyIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJuIiwic29ydCIsImFzY2VuZGluZyIsImdldENvbG9yIiwiZ2V0UmFkaXVzIiwiY29sb3JTY2FsZUZ1bmMiLCJjdiIsImNvbG9yIiwicmFkaXVzU2NhbGVGdW5jIiwiaW5mbyIsImlzUGlja2VkIiwicGlja2VkIiwiaW5kZXgiLCJvYmplY3QiLCJjbHVzdGVyIiwiY29sb3JWYWx1ZSIsInJhZGl1cyIsIl9vbkdldFN1YmxheWVyUmFkaXVzIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsIkJvb2xlYW4iLCJpZCIsInJhZGl1c1NjYWxlIiwib3BhY2l0eSIsInBpY2thYmxlIiwiU2NhdHRlcnBsb3RMYXllciIsImJpbmQiLCJfb25HZXRTdWJsYXllckNvbG9yIiwidXBkYXRlVHJpZ2dlcnMiLCJnZXRVcGRhdGVUcmlnZ2VycyIsIkNvbXBvc2l0ZUxheWVyIiwibGF5ZXJOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7QUFDQTs7QUFFQTs7QUFPQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQW5DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUF1QkEsSUFBTUEsZ0JBQWdCQyxnQ0FBa0JDLGFBQWxCLENBQWdDQyxZQUF0RDtBQUNBLElBQU1DLHFCQUFxQkgsZ0NBQWtCSSxrQkFBbEIsQ0FBcUNGLFlBQWhFOztBQUVBLElBQU1HLGVBQWU7QUFDbkJKLGlCQUFlRixhQURJO0FBRW5CTyxlQUFhLElBRk07QUFHbkJDLGNBQVlDLDhCQUhPO0FBSW5CQyxjQUFZQyw2QkFBWUMsUUFKTDtBQUtuQkMsZUFBYVQsa0JBTE07O0FBT25CO0FBQ0FVLG1CQUFpQixDQVJFO0FBU25CQyxtQkFBaUIsR0FURTs7QUFXbkJDLGVBQWE7QUFBQSxXQUFLQyxFQUFFQyxRQUFQO0FBQUEsR0FYTTs7QUFhbkI7QUFDQUMsaUJBQWU7QUFBQSxXQUFVQyxPQUFPQyxNQUFqQjtBQUFBLEdBZEk7O0FBZ0JuQjtBQUNBQyxrQkFBZ0I7QUFBQSxXQUFRQyxLQUFLQyxVQUFMLENBQWdCQyxXQUF4QjtBQUFBLEdBakJHO0FBa0JuQkMsUUFBTTtBQWxCYSxDQUFyQjs7SUFxQnFCQyxZOzs7Ozs7Ozs7O3NDQUNEO0FBQ2hCLFdBQUtDLEtBQUwsR0FBYTtBQUNYQyxrQkFBVSxJQURDO0FBRVhDLGlCQUFTO0FBRkUsT0FBYjtBQUlEOzs7NENBRWdDO0FBQUEsVUFBZEMsV0FBYyxRQUFkQSxXQUFjOztBQUMvQixhQUFPQSxZQUFZQyxnQkFBbkI7QUFDRDs7O3VDQUVnRTtBQUFBLFVBQXBEQyxVQUFvRCxTQUFwREEsVUFBb0Q7QUFBQSxVQUF4Q0MsT0FBd0MsU0FBeENBLE9BQXdDO0FBQUEsVUFBL0JDLFFBQStCLFNBQS9CQSxRQUErQjtBQUFBLFVBQXJCQyxLQUFxQixTQUFyQkEsS0FBcUI7QUFBQSxVQUFkTCxXQUFjLFNBQWRBLFdBQWM7O0FBQy9ELFVBQUlBLFlBQVlNLFdBQVosSUFBMkIsS0FBS0Msb0JBQUwsQ0FBMEJILFFBQTFCLEVBQW9DQyxLQUFwQyxDQUEvQixFQUEyRTtBQUN6RTtBQUNBLGFBQUtHLGNBQUw7QUFDQSxhQUFLQyxXQUFMOztBQUVBO0FBQ0EsYUFBS0MsbUJBQUw7QUFDRCxPQVBELE1BT08sSUFBSSxLQUFLQyxvQkFBTCxDQUEwQlQsVUFBMUIsRUFBc0NDLE9BQXRDLENBQUosRUFBb0Q7QUFDekQsYUFBS00sV0FBTDtBQUNBLGFBQUtDLG1CQUFMO0FBQ0QsT0FITSxNQUdBLElBQUksS0FBS0UsNkJBQUwsQ0FBbUNSLFFBQW5DLEVBQTZDQyxLQUE3QyxDQUFKLEVBQXlEO0FBQzlELGFBQUtLLG1CQUFMO0FBQ0Q7QUFDRjs7O3lDQUVvQk4sUSxFQUFVQyxLLEVBQU87QUFDcEMsYUFDRUQsU0FBU2pDLGFBQVQsS0FBMkJrQyxNQUFNbEMsYUFBakMsSUFDQWlDLFNBQVNuQixXQUFULEtBQXlCb0IsTUFBTXBCLFdBRmpDO0FBSUQ7Ozt5Q0FFb0JpQixVLEVBQVlDLE8sRUFBUztBQUN4QyxhQUNFVSxLQUFLQyxLQUFMLENBQVdaLFdBQVdhLFFBQVgsQ0FBb0JDLElBQS9CLE1BQXlDSCxLQUFLQyxLQUFMLENBQVdYLFFBQVFZLFFBQVIsQ0FBaUJDLElBQTVCLENBRDNDO0FBR0Q7OztrREFFNkJaLFEsRUFBVUMsSyxFQUFPO0FBQzdDLGFBQ0Usd0NBQTRCRCxRQUE1QixFQUFzQ0MsS0FBdEMsS0FDQSx5Q0FBNkJELFFBQTdCLEVBQXVDQyxLQUF2QyxDQURBLElBRUEsd0NBQTRCRCxRQUE1QixFQUFzQ0MsS0FBdEMsQ0FGQSxJQUdBRCxTQUFTaEIsYUFBVCxLQUEyQmlCLE1BQU1qQixhQUpuQztBQU1EOzs7cUNBRWdCO0FBQUEsbUJBQ2EsS0FBS2lCLEtBRGxCO0FBQUEsVUFDUlksSUFEUSxVQUNSQSxJQURRO0FBQUEsVUFDRmhDLFdBREUsVUFDRkEsV0FERTs7QUFFZixXQUFLaUMsUUFBTCxDQUFjLEVBQUNuQixTQUFTLDhCQUFXa0IsSUFBWCxFQUFpQmhDLFdBQWpCLENBQVYsRUFBZDtBQUNBO0FBQ0Q7OztrQ0FFYTtBQUFBLFVBQ0xjLE9BREssR0FDTSxLQUFLRixLQURYLENBQ0xFLE9BREs7QUFBQSxVQUVMNUIsYUFGSyxHQUVZLEtBQUtrQyxLQUZqQixDQUVMbEMsYUFGSztBQUFBLHFCQU1SLEtBQUtnQyxPQU5HO0FBQUEsVUFJVlksUUFKVSxZQUlWQSxRQUpVO0FBQUEsdUNBS1ZBLFFBTFU7QUFBQSxVQUtDSSxTQUxELHFCQUtDQSxTQUxEO0FBQUEsVUFLWUMsUUFMWixxQkFLWUEsUUFMWjtBQUFBLFVBS3NCQyxNQUx0QixxQkFLc0JBLE1BTHRCO0FBQUEsVUFLOEJDLEtBTDlCLHFCQUs4QkEsS0FMOUI7O0FBUVo7O0FBQ0EsVUFBTU4sT0FBT0gsS0FBS0MsS0FBTCxDQUFXQyxTQUFTQyxJQUFwQixDQUFiO0FBQ0EsVUFBTU8sT0FBT0Msc0JBQVlDLE1BQVosQ0FBbUIsQ0FBQ04sU0FBRCxFQUFZQyxRQUFaLENBQW5CLEVBQTBDSixJQUExQyxFQUFnRCxDQUMzRE0sS0FEMkQsRUFFM0RELE1BRjJELENBQWhELENBQWI7O0FBS0EsVUFBTXZCLFdBQVcsa0NBQWUsRUFBQ3lCLFVBQUQsRUFBT3BELDRCQUFQLEVBQXNCNEIsZ0JBQXRCLEVBQStCaUIsVUFBL0IsRUFBZixDQUFqQjs7QUFFQSxXQUFLRSxRQUFMLENBQWMsRUFBQ3BCLGtCQUFELEVBQWQ7QUFDRDs7OzBDQUVxQjtBQUFBLG9CQU1oQixLQUFLTyxLQU5XO0FBQUEsVUFFbEIxQixVQUZrQixXQUVsQkEsVUFGa0I7QUFBQSxVQUdsQlMsYUFIa0IsV0FHbEJBLGFBSGtCO0FBQUEsVUFJbEJHLGNBSmtCLFdBSWxCQSxjQUprQjtBQUFBLFVBS2xCbUMsZ0JBTGtCLFdBS2xCQSxnQkFMa0I7QUFBQSxVQU9iNUIsUUFQYSxHQU9ELEtBQUtELEtBUEosQ0FPYkMsUUFQYTs7O0FBU3BCLFVBQU02QixlQUFlLENBQUMsQ0FBRCxFQUFJLGtCQUFJN0IsUUFBSixFQUFjUCxjQUFkLENBQUosQ0FBckI7O0FBRUEsVUFBTXFDLGNBQWM5QixTQUNqQitCLEdBRGlCLENBQ2I7QUFBQSxlQUFLekMsY0FBYzBDLEVBQUVyQyxVQUFGLENBQWFKLE1BQTNCLENBQUw7QUFBQSxPQURhLEVBRWpCMEMsTUFGaUIsQ0FFVjtBQUFBLGVBQUtDLE9BQU9DLFFBQVAsQ0FBZ0JDLENBQWhCLENBQUw7QUFBQSxPQUZVLENBQXBCO0FBR0EsVUFBTTFELGNBQ0pHLGVBQWVDLDZCQUFZQyxRQUEzQixHQUNJLHFCQUFPK0MsV0FBUCxDQURKLEdBRUlBLFlBQVlPLElBQVosQ0FBaUJDLGtCQUFqQixDQUhOOztBQUtBLFdBQUtsQixRQUFMLENBQWM7QUFDWjFDLGdDQURZO0FBRVptRDtBQUZZLE9BQWQ7O0FBS0Esd0NBQXNCLElBQXRCO0FBQ0EseUNBQXVCLElBQXZCOztBQUVBRCx1QkFBaUJsRCxXQUFqQjtBQUNEOzs7d0NBRW1CO0FBQ2xCLGFBQU87QUFDTDZELGtCQUFVO0FBQ1I1RCxzQkFBWSxLQUFLNEIsS0FBTCxDQUFXNUIsVUFEZjtBQUVSRCx1QkFBYSxLQUFLNkIsS0FBTCxDQUFXN0IsV0FGaEI7QUFHUlkseUJBQWUsS0FBS2lCLEtBQUwsQ0FBV2pCLGFBSGxCO0FBSVJULHNCQUFZLEtBQUswQixLQUFMLENBQVcxQixVQUpmO0FBS1JJLDJCQUFpQixLQUFLc0IsS0FBTCxDQUFXdEIsZUFMcEI7QUFNUkMsMkJBQWlCLEtBQUtxQixLQUFMLENBQVdyQjtBQU5wQixTQURMO0FBU0xzRCxtQkFBVztBQUNUeEQsdUJBQWEsS0FBS3VCLEtBQUwsQ0FBV3ZCLFdBRGY7QUFFVDZDLHdCQUFjLEtBQUt0QixLQUFMLENBQVdzQixZQUZoQjtBQUdUcEMsMEJBQWdCLEtBQUtjLEtBQUwsQ0FBV2Q7QUFIbEI7QUFUTixPQUFQO0FBZUQ7O0FBRUQ7Ozs7Ozt3Q0FHb0JDLEksRUFBTTtBQUFBLFVBQ2pCSixhQURpQixHQUNBLEtBQUtpQixLQURMLENBQ2pCakIsYUFEaUI7QUFBQSxtQkFFYyxLQUFLUyxLQUZuQjtBQUFBLFVBRWpCMEMsY0FGaUIsVUFFakJBLGNBRmlCO0FBQUEsVUFFRC9ELFdBRkMsVUFFREEsV0FGQzs7O0FBSXhCLFVBQU1nRSxLQUFLcEQsY0FBY0ksS0FBS0MsVUFBTCxDQUFnQkosTUFBOUIsQ0FBWDs7QUFFQTtBQUNBLFVBQU1vRCxRQUNKVCxPQUFPQyxRQUFQLENBQWdCTyxFQUFoQixLQUNBQSxNQUFNaEUsWUFBWSxDQUFaLENBRE4sSUFFQWdFLE1BQU1oRSxZQUFZQSxZQUFZYyxNQUFaLEdBQXFCLENBQWpDLENBRk4sR0FHSWlELGVBQWVDLEVBQWYsQ0FISixHQUlJLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUxOOztBQU9BO0FBQ0FDLFlBQU0sQ0FBTixJQUFXVCxPQUFPQyxRQUFQLENBQWdCUSxNQUFNLENBQU4sQ0FBaEIsSUFBNEJBLE1BQU0sQ0FBTixDQUE1QixHQUF1QyxHQUFsRDs7QUFFQSxhQUFPQSxLQUFQO0FBQ0Q7Ozt5Q0FFb0JqRCxJLEVBQU07QUFBQSxVQUNsQkQsY0FEa0IsR0FDQSxLQUFLYyxLQURMLENBQ2xCZCxjQURrQjtBQUFBLFVBRWxCbUQsZUFGa0IsR0FFQyxLQUFLN0MsS0FGTixDQUVsQjZDLGVBRmtCOztBQUd6QixhQUFPQSxnQkFBZ0JuRCxlQUFlQyxJQUFmLENBQWhCLENBQVA7QUFDRDs7OzBDQUVzQjtBQUFBLFVBQVBtRCxJQUFPLFNBQVBBLElBQU87QUFBQSxVQUNkN0MsUUFEYyxHQUNGLEtBQUtELEtBREgsQ0FDZEMsUUFEYzs7QUFFckIsVUFBTThDLFdBQVdELEtBQUtFLE1BQUwsSUFBZUYsS0FBS0csS0FBTCxHQUFhLENBQUMsQ0FBOUM7O0FBRUEsVUFBSUMsU0FBUyxJQUFiO0FBQ0EsVUFBSUgsUUFBSixFQUFjO0FBQ1o7QUFDQSxZQUFNSSxVQUFVbEQsU0FBUzZDLEtBQUtHLEtBQWQsQ0FBaEI7QUFDQSxZQUFNRyxhQUFhLEtBQUs1QyxLQUFMLENBQVdqQixhQUFYLENBQXlCNEQsUUFBUXZELFVBQVIsQ0FBbUJKLE1BQTVDLENBQW5COztBQUVBMEQsNENBQ0tDLFFBQVF2RCxVQURiO0FBRUV3RCxnQ0FGRjtBQUdFQyxrQkFBUSxLQUFLQyxvQkFBTCxDQUEwQkgsT0FBMUIsQ0FIVjtBQUlFN0Qsb0JBQVU2RCxRQUFRSSxRQUFSLENBQWlCQztBQUo3QjtBQU1EOztBQUVELHdDQUNLVixJQURMO0FBRUVFLGdCQUFRUyxRQUFRUCxNQUFSLENBRlY7QUFHRTtBQUNBQTtBQUpGO0FBTUQ7OzttQ0FFYztBQUNiO0FBQ0E7QUFGYSxvQkFHbUIsS0FBSzFDLEtBSHhCO0FBQUEsVUFHTmtELEVBSE0sV0FHTkEsRUFITTtBQUFBLFVBR0ZDLFdBSEUsV0FHRkEsV0FIRTtBQUFBLFVBR1c3RCxJQUhYLFdBR1dBLElBSFg7O0FBS2I7O0FBTGEsb0JBTWUsS0FBS1UsS0FOcEI7QUFBQSxVQU1Ob0QsT0FOTSxXQU1OQSxPQU5NO0FBQUEsVUFNR0MsUUFOSCxXQU1HQSxRQU5IOztBQVFiOztBQUNBLGFBQU8sSUFBSUMsc0JBQUosQ0FBcUI7QUFDMUJKLFlBQU9BLEVBQVAsYUFEMEI7QUFFMUJ0QyxjQUFNLEtBQUtwQixLQUFMLENBQVdDLFFBRlM7QUFHMUIwRCxnQ0FIMEI7QUFJMUI3RCxrQkFKMEI7QUFLMUJWLHFCQUFhO0FBQUEsaUJBQUs2QyxFQUFFc0IsUUFBRixDQUFXQyxXQUFoQjtBQUFBLFNBTGE7QUFNMUJmLG1CQUFXLEtBQUthLG9CQUFMLENBQTBCUyxJQUExQixDQUErQixJQUEvQixDQU5lO0FBTzFCSCx3QkFQMEI7QUFRMUJDLDBCQVIwQjtBQVMxQnJCLGtCQUFVLEtBQUt3QixtQkFBTCxDQUF5QkQsSUFBekIsQ0FBOEIsSUFBOUIsQ0FUZ0I7QUFVMUJFLHdCQUFnQixLQUFLQyxpQkFBTDtBQVZVLE9BQXJCLENBQVA7QUFZRDs7O0VBeE11Q0Msb0I7O2tCQUFyQnBFLFk7OztBQTJNckJBLGFBQWFxRSxTQUFiLEdBQXlCLGNBQXpCO0FBQ0FyRSxhQUFhckIsWUFBYixHQUE0QkEsWUFBNUIiLCJmaWxlIjoiY2x1c3Rlci1sYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Q29tcG9zaXRlTGF5ZXIsIFNjYXR0ZXJwbG90TGF5ZXJ9IGZyb20gJ2RlY2suZ2wnO1xuaW1wb3J0IGdlb1ZpZXdwb3J0IGZyb20gJ0BtYXBib3gvZ2VvLXZpZXdwb3J0JztcbmltcG9ydCB7YXNjZW5kaW5nLCBleHRlbnQsIG1heH0gZnJvbSAnZDMtYXJyYXknO1xuXG5pbXBvcnQge1xuICBnZXRDb2xvclNjYWxlRnVuY3Rpb24sXG4gIGdldFJhZGl1c1NjYWxlRnVuY3Rpb24sXG4gIG5lZWRzUmVjYWxjdWxhdGVSYWRpdXNSYW5nZSxcbiAgbmVlZHNSZWNhbGN1bGF0ZUNvbG9yRG9tYWluLFxuICBuZWVkUmVDYWxjdWxhdGVTY2FsZUZ1bmN0aW9uXG59IGZyb20gJy4uL2xheWVyLXV0aWxzL3V0aWxzJztcbmltcG9ydCB7RGVmYXVsdENvbG9yUmFuZ2V9IGZyb20gJ2NvbnN0YW50cy9jb2xvci1yYW5nZXMnO1xuaW1wb3J0IHtMQVlFUl9WSVNfQ09ORklHU30gZnJvbSAnbGF5ZXJzL2xheWVyLWZhY3RvcnknO1xuaW1wb3J0IHtTQ0FMRV9UWVBFU30gZnJvbSAnY29uc3RhbnRzL2RlZmF1bHQtc2V0dGluZ3MnO1xuXG5pbXBvcnQge1xuICBjbGVhckNsdXN0ZXJlckNhY2hlLFxuICBjbHVzdGVyc0F0Wm9vbSxcbiAgZ2V0R2VvSlNPTlxufSBmcm9tICcuLi9sYXllci11dGlscy9jbHVzdGVyLXV0aWxzJztcblxuY29uc3QgZGVmYXVsdFJhZGl1cyA9IExBWUVSX1ZJU19DT05GSUdTLmNsdXN0ZXJSYWRpdXMuZGVmYXVsdFZhbHVlO1xuY29uc3QgZGVmYXVsdFJhZGl1c1JhbmdlID0gTEFZRVJfVklTX0NPTkZJR1MuY2x1c3RlclJhZGl1c1JhbmdlLmRlZmF1bHRWYWx1ZTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBjbHVzdGVyUmFkaXVzOiBkZWZhdWx0UmFkaXVzLFxuICBjb2xvckRvbWFpbjogbnVsbCxcbiAgY29sb3JSYW5nZTogRGVmYXVsdENvbG9yUmFuZ2UsXG4gIGNvbG9yU2NhbGU6IFNDQUxFX1RZUEVTLnF1YW50aXplLFxuICByYWRpdXNSYW5nZTogZGVmYXVsdFJhZGl1c1JhbmdlLFxuXG4gIC8vIG1heWJlIGxhdGVyLi4uXG4gIGxvd2VyUGVyY2VudGlsZTogMCxcbiAgdXBwZXJQZXJjZW50aWxlOiAxMDAsXG5cbiAgZ2V0UG9zaXRpb246IHggPT4geC5wb3NpdGlvbixcblxuICAvLyBpZiB3YW50IHRvIGhhdmUgY29sb3IgYmFzZWQgb24gY3VzdG9taXplZCBhZ2dyZWdhdG9yLCBpbnN0ZWFkIG9mIGNvdW50XG4gIGdldENvbG9yVmFsdWU6IHBvaW50cyA9PiBwb2ludHMubGVuZ3RoLFxuXG4gIC8vICBpZiB3YW50IHRvIGhhdmUgcmFkaXVzIGJhc2VkIG9uIGN1c3RvbWl6ZWQgYWdncmVnYXRvciwgaW5zdGVhZCBvZiBjb3VudFxuICBnZXRSYWRpdXNWYWx1ZTogY2VsbCA9PiBjZWxsLnByb3BlcnRpZXMucG9pbnRfY291bnQsXG4gIGZwNjQ6IGZhbHNlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbHVzdGVyTGF5ZXIgZXh0ZW5kcyBDb21wb3NpdGVMYXllciB7XG4gIGluaXRpYWxpemVTdGF0ZSgpIHtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2x1c3RlcnM6IG51bGwsXG4gICAgICBnZW9KU09OOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHNob3VsZFVwZGF0ZVN0YXRlKHtjaGFuZ2VGbGFnc30pIHtcbiAgICByZXR1cm4gY2hhbmdlRmxhZ3Muc29tZXRoaW5nQ2hhbmdlZDtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHtvbGRDb250ZXh0LCBjb250ZXh0LCBvbGRQcm9wcywgcHJvcHMsIGNoYW5nZUZsYWdzfSkge1xuICAgIGlmIChjaGFuZ2VGbGFncy5kYXRhQ2hhbmdlZCB8fCB0aGlzLm5lZWRzUmVQcm9qZWN0UG9pbnRzKG9sZFByb3BzLCBwcm9wcykpIHtcbiAgICAgIC8vIHByb2plY3QgZGF0YSBpbnRvIGNsdXN0ZXJzLCBhbmQgZ2V0IGNsdXN0ZXJlZCBkYXRhXG4gICAgICB0aGlzLnByb2Nlc3NHZW9KU09OKCk7XG4gICAgICB0aGlzLmdldENsdXN0ZXJzKCk7XG5cbiAgICAgIC8vIHRoaXMgbmVlZHMgY2x1c3RlcmVkIGRhdGEgdG8gYmUgc2V0XG4gICAgICB0aGlzLmdldENvbG9yVmFsdWVEb21haW4oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVlZHNSZWNsdXN0ZXJQb2ludHMob2xkQ29udGV4dCwgY29udGV4dCkpIHtcbiAgICAgIHRoaXMuZ2V0Q2x1c3RlcnMoKTtcbiAgICAgIHRoaXMuZ2V0Q29sb3JWYWx1ZURvbWFpbigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5uZWVkc1JlY2FsY3VsYXRlU2NhbGVGdW5jdGlvbihvbGRQcm9wcywgcHJvcHMpKSB7XG4gICAgICB0aGlzLmdldENvbG9yVmFsdWVEb21haW4oKTtcbiAgICB9XG4gIH1cblxuICBuZWVkc1JlUHJvamVjdFBvaW50cyhvbGRQcm9wcywgcHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgb2xkUHJvcHMuY2x1c3RlclJhZGl1cyAhPT0gcHJvcHMuY2x1c3RlclJhZGl1cyB8fFxuICAgICAgb2xkUHJvcHMuZ2V0UG9zaXRpb24gIT09IHByb3BzLmdldFBvc2l0aW9uXG4gICAgKTtcbiAgfVxuXG4gIG5lZWRzUmVjbHVzdGVyUG9pbnRzKG9sZENvbnRleHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgTWF0aC5yb3VuZChvbGRDb250ZXh0LnZpZXdwb3J0Lnpvb20pICE9PSBNYXRoLnJvdW5kKGNvbnRleHQudmlld3BvcnQuem9vbSlcbiAgICApO1xuICB9XG5cbiAgbmVlZHNSZWNhbGN1bGF0ZVNjYWxlRnVuY3Rpb24ob2xkUHJvcHMsIHByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG5lZWRzUmVjYWxjdWxhdGVDb2xvckRvbWFpbihvbGRQcm9wcywgcHJvcHMpIHx8XG4gICAgICBuZWVkUmVDYWxjdWxhdGVTY2FsZUZ1bmN0aW9uKG9sZFByb3BzLCBwcm9wcykgfHxcbiAgICAgIG5lZWRzUmVjYWxjdWxhdGVSYWRpdXNSYW5nZShvbGRQcm9wcywgcHJvcHMpIHx8XG4gICAgICBvbGRQcm9wcy5nZXRDb2xvclZhbHVlICE9PSBwcm9wcy5nZXRDb2xvclZhbHVlXG4gICAgKTtcbiAgfVxuXG4gIHByb2Nlc3NHZW9KU09OKCkge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRQb3NpdGlvbn0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMuc2V0U3RhdGUoe2dlb0pTT046IGdldEdlb0pTT04oZGF0YSwgZ2V0UG9zaXRpb24pfSk7XG4gICAgY2xlYXJDbHVzdGVyZXJDYWNoZSgpO1xuICB9XG5cbiAgZ2V0Q2x1c3RlcnMoKSB7XG4gICAgY29uc3Qge2dlb0pTT059ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7Y2x1c3RlclJhZGl1c30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHZpZXdwb3J0LFxuICAgICAgdmlld3BvcnQ6IHtsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIHdpZHRofVxuICAgIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyB6b29tIG5lZWRzIHRvIGJlIGFuIGludGVnZXIgZm9yIHRoZSBkaWZmZXJlbnQgbWFwIHV0aWxzLiBBbHNvIGhlbHBzIHdpdGggY2FjaGUga2V5LlxuICAgIGNvbnN0IHpvb20gPSBNYXRoLnJvdW5kKHZpZXdwb3J0Lnpvb20pO1xuICAgIGNvbnN0IGJib3ggPSBnZW9WaWV3cG9ydC5ib3VuZHMoW2xvbmdpdHVkZSwgbGF0aXR1ZGVdLCB6b29tLCBbXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIF0pO1xuXG4gICAgY29uc3QgY2x1c3RlcnMgPSBjbHVzdGVyc0F0Wm9vbSh7YmJveCwgY2x1c3RlclJhZGl1cywgZ2VvSlNPTiwgem9vbX0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7Y2x1c3RlcnN9KTtcbiAgfVxuXG4gIGdldENvbG9yVmFsdWVEb21haW4oKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3JTY2FsZSxcbiAgICAgIGdldENvbG9yVmFsdWUsXG4gICAgICBnZXRSYWRpdXNWYWx1ZSxcbiAgICAgIG9uU2V0Q29sb3JEb21haW5cbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7Y2x1c3RlcnN9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHJhZGl1c0RvbWFpbiA9IFswLCBtYXgoY2x1c3RlcnMsIGdldFJhZGl1c1ZhbHVlKV07XG5cbiAgICBjb25zdCBjb2xvclZhbHVlcyA9IGNsdXN0ZXJzXG4gICAgICAubWFwKGQgPT4gZ2V0Q29sb3JWYWx1ZShkLnByb3BlcnRpZXMucG9pbnRzKSlcbiAgICAgIC5maWx0ZXIobiA9PiBOdW1iZXIuaXNGaW5pdGUobikpO1xuICAgIGNvbnN0IGNvbG9yRG9tYWluID1cbiAgICAgIGNvbG9yU2NhbGUgPT09IFNDQUxFX1RZUEVTLnF1YW50aXplXG4gICAgICAgID8gZXh0ZW50KGNvbG9yVmFsdWVzKVxuICAgICAgICA6IGNvbG9yVmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29sb3JEb21haW4sXG4gICAgICByYWRpdXNEb21haW5cbiAgICB9KTtcblxuICAgIGdldENvbG9yU2NhbGVGdW5jdGlvbih0aGlzKTtcbiAgICBnZXRSYWRpdXNTY2FsZUZ1bmN0aW9uKHRoaXMpO1xuXG4gICAgb25TZXRDb2xvckRvbWFpbihjb2xvckRvbWFpbik7XG4gIH1cblxuICBnZXRVcGRhdGVUcmlnZ2VycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0Q29sb3I6IHtcbiAgICAgICAgY29sb3JSYW5nZTogdGhpcy5wcm9wcy5jb2xvclJhbmdlLFxuICAgICAgICBjb2xvckRvbWFpbjogdGhpcy5wcm9wcy5jb2xvckRvbWFpbixcbiAgICAgICAgZ2V0Q29sb3JWYWx1ZTogdGhpcy5wcm9wcy5nZXRDb2xvclZhbHVlLFxuICAgICAgICBjb2xvclNjYWxlOiB0aGlzLnByb3BzLmNvbG9yU2NhbGUsXG4gICAgICAgIGxvd2VyUGVyY2VudGlsZTogdGhpcy5wcm9wcy5sb3dlclBlcmNlbnRpbGUsXG4gICAgICAgIHVwcGVyUGVyY2VudGlsZTogdGhpcy5wcm9wcy51cHBlclBlcmNlbnRpbGVcbiAgICAgIH0sXG4gICAgICBnZXRSYWRpdXM6IHtcbiAgICAgICAgcmFkaXVzUmFuZ2U6IHRoaXMucHJvcHMucmFkaXVzUmFuZ2UsXG4gICAgICAgIHJhZGl1c0RvbWFpbjogdGhpcy5wcm9wcy5yYWRpdXNEb21haW4sXG4gICAgICAgIGdldFJhZGl1c1ZhbHVlOiB0aGlzLnByb3BzLmdldFJhZGl1c1ZhbHVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qXG4gICAqIG92ZXJyaWRlIGRlZmF1bHQgbGF5ZXIgbWV0aG9kIHRvIGNhbGN1bGF0ZSBjZWxsIGNvbG9yIGJhc2VkIG9uIGNvbG9yIHNjYWxlIGZ1bmN0aW9uXG4gICAqL1xuICBfb25HZXRTdWJsYXllckNvbG9yKGNlbGwpIHtcbiAgICBjb25zdCB7Z2V0Q29sb3JWYWx1ZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtjb2xvclNjYWxlRnVuYywgY29sb3JEb21haW59ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGN2ID0gZ2V0Q29sb3JWYWx1ZShjZWxsLnByb3BlcnRpZXMucG9pbnRzKTtcblxuICAgIC8vIGlmIGNlbGwgdmFsdWUgaXMgb3V0c2lkZSBkb21haW4sIHNldCBhbHBoYSB0byAwXG4gICAgY29uc3QgY29sb3IgPVxuICAgICAgTnVtYmVyLmlzRmluaXRlKGN2KSAmJlxuICAgICAgY3YgPj0gY29sb3JEb21haW5bMF0gJiZcbiAgICAgIGN2IDw9IGNvbG9yRG9tYWluW2NvbG9yRG9tYWluLmxlbmd0aCAtIDFdXG4gICAgICAgID8gY29sb3JTY2FsZUZ1bmMoY3YpXG4gICAgICAgIDogWzAsIDAsIDAsIDBdO1xuXG4gICAgLy8gYWRkIGZpbmFsIGFscGhhIHRvIGNvbG9yXG4gICAgY29sb3JbM10gPSBOdW1iZXIuaXNGaW5pdGUoY29sb3JbM10pID8gY29sb3JbM10gOiAyNTU7XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBfb25HZXRTdWJsYXllclJhZGl1cyhjZWxsKSB7XG4gICAgY29uc3Qge2dldFJhZGl1c1ZhbHVlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3JhZGl1c1NjYWxlRnVuY30gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiByYWRpdXNTY2FsZUZ1bmMoZ2V0UmFkaXVzVmFsdWUoY2VsbCkpO1xuICB9XG5cbiAgZ2V0UGlja2luZ0luZm8oe2luZm99KSB7XG4gICAgY29uc3Qge2NsdXN0ZXJzfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaXNQaWNrZWQgPSBpbmZvLnBpY2tlZCAmJiBpbmZvLmluZGV4ID4gLTE7XG5cbiAgICBsZXQgb2JqZWN0ID0gbnVsbDtcbiAgICBpZiAoaXNQaWNrZWQpIHtcbiAgICAgIC8vIGFkZCBjbHVzdGVyIGNvbG9yVmFsdWUgdG8gb2JqZWN0XG4gICAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlcnNbaW5mby5pbmRleF07XG4gICAgICBjb25zdCBjb2xvclZhbHVlID0gdGhpcy5wcm9wcy5nZXRDb2xvclZhbHVlKGNsdXN0ZXIucHJvcGVydGllcy5wb2ludHMpO1xuXG4gICAgICBvYmplY3QgPSB7XG4gICAgICAgIC4uLmNsdXN0ZXIucHJvcGVydGllcyxcbiAgICAgICAgY29sb3JWYWx1ZSxcbiAgICAgICAgcmFkaXVzOiB0aGlzLl9vbkdldFN1YmxheWVyUmFkaXVzKGNsdXN0ZXIpLFxuICAgICAgICBwb3NpdGlvbjogY2x1c3Rlci5nZW9tZXRyeS5jb29yZGluYXRlc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uaW5mbyxcbiAgICAgIHBpY2tlZDogQm9vbGVhbihvYmplY3QpLFxuICAgICAgLy8gb3ZlcnJpZGUgb2JqZWN0IHdpdGggcGlja2VkIGNsdXN0ZXIgcHJvcGVydHlcbiAgICAgIG9iamVjdFxuICAgIH07XG4gIH1cblxuICByZW5kZXJMYXllcnMoKSB7XG4gICAgLy8gZm9yIHN1YmNsYXNzaW5nLCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byByZXR1cm5cbiAgICAvLyBjdXN0b21pemVkIHN1YiBsYXllciBwcm9wc1xuICAgIGNvbnN0IHtpZCwgcmFkaXVzU2NhbGUsIGZwNjR9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIGJhc2UgbGF5ZXIgcHJvcHNcbiAgICBjb25zdCB7b3BhY2l0eSwgcGlja2FibGV9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIHJldHVybiBwcm9wcyB0byB0aGUgc3VibGF5ZXIgY29uc3RydWN0b3JcbiAgICByZXR1cm4gbmV3IFNjYXR0ZXJwbG90TGF5ZXIoe1xuICAgICAgaWQ6IGAke2lkfS1jbHVzdGVyYCxcbiAgICAgIGRhdGE6IHRoaXMuc3RhdGUuY2x1c3RlcnMsXG4gICAgICByYWRpdXNTY2FsZSxcbiAgICAgIGZwNjQsXG4gICAgICBnZXRQb3NpdGlvbjogZCA9PiBkLmdlb21ldHJ5LmNvb3JkaW5hdGVzLFxuICAgICAgZ2V0UmFkaXVzOiB0aGlzLl9vbkdldFN1YmxheWVyUmFkaXVzLmJpbmQodGhpcyksXG4gICAgICBvcGFjaXR5LFxuICAgICAgcGlja2FibGUsXG4gICAgICBnZXRDb2xvcjogdGhpcy5fb25HZXRTdWJsYXllckNvbG9yLmJpbmQodGhpcyksXG4gICAgICB1cGRhdGVUcmlnZ2VyczogdGhpcy5nZXRVcGRhdGVUcmlnZ2VycygpXG4gICAgfSk7XG4gIH1cbn1cblxuQ2x1c3RlckxheWVyLmxheWVyTmFtZSA9ICdDbHVzdGVyTGF5ZXInO1xuQ2x1c3RlckxheWVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiJdfQ==