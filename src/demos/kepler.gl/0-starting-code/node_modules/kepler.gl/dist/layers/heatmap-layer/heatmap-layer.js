'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.heatmapVisConfigs = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _reselect = require('reselect');

var _defaultSettings = require('../../constants/default-settings');

var _colorUtils = require('../../utils/color-utils');

var _mapboxUtils = require('../mapbox-utils');

var _mapboxglLayer = require('../mapboxgl-layer');

var _mapboxglLayer2 = _interopRequireDefault(_mapboxglLayer);

var _heatmapLayerIcon = require('./heatmap-layer-icon');

var _heatmapLayerIcon2 = _interopRequireDefault(_heatmapLayerIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var MAX_ZOOM_LEVEL = 18;
var DEFAULT_OPACITY = .8;

var heatmapVisConfigs = exports.heatmapVisConfigs = {
  opacity: 'opacity',
  weight: 'weight',
  colorRange: 'colorRange',
  radius: 'heatmapRadius',
  weightRange: 'weight'
};

/**
 *
 * @param colorDomain
 * @param colorScale
 * @param visConfig
 * @return [
 *  0, "rgba(33,102,172,0)",
 *  0.2, "rgb(103,169,207)",
 *  0.4, "rgb(209,229,240)",
 *  0.6, "rgb(253,219,199)",
 *  0.8, "rgb(239,138,98)",
 *  1, "rgb(178,24,43)"
 * ]
 */
var heatmapDensity = function heatmapDensity(colorDomain, colorScale, visConfig) {

  // this is work around to deal with ordinal scale type.
  // I checked other aggregate layers and we don't deal with ordinal scales
  var scaleType = colorScale === _defaultSettings.SCALE_TYPES.ordinal ? _defaultSettings.SCALE_TYPES.quantize : colorScale;

  var scaleFunction = _defaultSettings.SCALE_FUNC[scaleType];

  var scale = scaleFunction().domain(colorDomain).range(visConfig.colorRange.colors);

  if (colorScale === _defaultSettings.SCALE_TYPES.ordinal) {
    scale.domain().map(function (level) {
      return [scale(level), 'rgb(' + (0, _colorUtils.hexToRgb)(scale(level)).join(',') + ')' // color
      ];
    });
  }

  return scale.range().reduce(function (bands, level) {
    var invert = scale.invertExtent(level);
    return [].concat((0, _toConsumableArray3.default)(bands), [invert[0], // first value in the range
    'rgb(' + (0, _colorUtils.hexToRgb)(level).join(',') + ')' // color
    ]);
  }, []);
};

var shouldRebuild = function shouldRebuild(sameData, sameConfig) {
  return !(sameData && sameConfig);
};

var HeatmapLayer = function (_MapboxGLLayer) {
  (0, _inherits3.default)(HeatmapLayer, _MapboxGLLayer);

  function HeatmapLayer(props) {
    (0, _classCallCheck3.default)(this, HeatmapLayer);

    var _this = (0, _possibleConstructorReturn3.default)(this, (HeatmapLayer.__proto__ || Object.getPrototypeOf(HeatmapLayer)).call(this, props));

    _this.sameDataSelector = function (_ref) {
      var allData = _ref.allData,
          filteredIndex = _ref.filteredIndex,
          oldLayerData = _ref.oldLayerData,
          _ref$opt = _ref.opt,
          opt = _ref$opt === undefined ? {} : _ref$opt;

      return Boolean(oldLayerData && oldLayerData.data && oldLayerData.columns && opt.sameData);
    };

    _this.sameConfigSelector = function (_ref2) {
      var oldLayerData = _ref2.oldLayerData,
          config = _ref2.config;

      // columns must use the same filedIdx
      // this is a fast way to compare columns object
      var columns = config.columns,
          weightField = config.weightField;


      if (!oldLayerData) {
        return false;
      }

      var sameColumns = columns === oldLayerData.columns;
      var sameWeightField = weightField === oldLayerData.weightField;
      return sameColumns && sameWeightField;
    };

    _this.rebuildSelector = (0, _reselect.createSelector)(_this.sameDataSelector, _this.sameConfigSelector, function (sameData, sameColumns) {
      return !(sameData && sameColumns);
    });

    _this.datasetSelector = function (config) {
      return config.dataId;
    };

    _this.isVisibleSelector = function (config) {
      return config.isVisible;
    };

    _this.visConfigSelector = function (config) {
      return config.visConfig;
    };

    _this.weightFieldSelector = function (config) {
      return config.weightField;
    };

    _this.colorDomainSelector = function (config) {
      return config.colorDomain;
    };

    _this.colorScaleSelector = function (config) {
      return config.colorScale;
    };

    _this.radiusSelector = function (config) {
      return config.visConfig.radius;
    };

    _this.computeHeatmapConfiguration = (0, _reselect.createSelector)(_this.datasetSelector, _this.isVisibleSelector, _this.visConfigSelector, _this.weightFieldSelector, _this.colorDomainSelector, _this.colorScaleSelector, _this.radiusSelector, function (datasetId, isVisible, visConfig, weightField, colorDomain, colorScale, radius) {
      // TODO: improve using setPaintProperty
      return {
        type: 'heatmap',
        source: datasetId,
        layout: {
          visibility: isVisible ? 'visible' : 'none'
        },
        maxzoom: MAX_ZOOM_LEVEL,
        paint: {
          'heatmap-weight': weightField ? ['interpolate', ['linear'], ['get', weightField.name], 0, 0, MAX_ZOOM_LEVEL, visConfig.weight] : 1,
          'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],
          'heatmap-color': ['interpolate', ['linear'], ['heatmap-density']].concat((0, _toConsumableArray3.default)(heatmapDensity(colorDomain, colorScale, visConfig))),
          'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, radius // radius
          ],
          'heatmap-opacity': visConfig.opacity || DEFAULT_OPACITY
        }
      };
    });

    _this.registerVisConfig(heatmapVisConfigs);
    return _this;
  }

  (0, _createClass3.default)(HeatmapLayer, [{
    key: 'getDefaultLayerConfig',
    value: function getDefaultLayerConfig() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return (0, _extends3.default)({}, (0, _get3.default)(HeatmapLayer.prototype.__proto__ || Object.getPrototypeOf(HeatmapLayer.prototype), 'getDefaultLayerConfig', this).call(this, props), {
        // add height visual channel
        weightField: null,
        weightDomain: [0, 1],
        weightRange: [0, 1],
        weightScale: 'linear'
      });
    }
  }, {
    key: 'formatLayerData',
    value: function formatLayerData(_, allData, filteredIndex, oldLayerData) {
      var opt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      var options = {
        allData: allData,
        filteredIndex: filteredIndex,
        oldLayerData: oldLayerData,
        opt: opt,
        config: this.config
      };

      var weightField = this.config.weightField;


      var data = !shouldRebuild(this.sameDataSelector(options), this.sameConfigSelector(options)) ? null : (0, _mapboxUtils.geojsonFromPoints)(allData, filteredIndex, this.config.columns, weightField ? [weightField] : []);

      var newConfig = this.computeHeatmapConfiguration(this.config);
      newConfig.id = this.id;

      return {
        columns: this.config.columns,
        config: newConfig,
        data: data,
        weightField: weightField
      };
    }
  }, {
    key: 'type',
    get: function get() {
      return 'heatmap';
    }
  }, {
    key: 'visualChannels',
    get: function get() {
      return (0, _extends3.default)({}, (0, _get3.default)(HeatmapLayer.prototype.__proto__ || Object.getPrototypeOf(HeatmapLayer.prototype), 'visualChannels', this), {
        weight: {
          property: 'weight',
          field: 'weightField',
          scale: 'weightScale',
          domain: 'weightDomain',
          range: 'weightRange',
          key: 'weight',
          channelScaleType: _defaultSettings.CHANNEL_SCALES.sizeAggr
        }
      });
    }
  }, {
    key: 'layerIcon',
    get: function get() {
      return _heatmapLayerIcon2.default;
    }
  }]);
  return HeatmapLayer;
}(_mapboxglLayer2.default);

exports.default = HeatmapLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,