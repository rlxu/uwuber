'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends5 = require('babel-runtime/helpers/extends');

var _extends6 = _interopRequireDefault(_extends5);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.generateMapboxLayers = generateMapboxLayers;
exports.updateMapboxLayers = updateMapboxLayers;
exports.geojsonFromPoints = geojsonFromPoints;

var _baseLayer = require('./base-layer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This function will convert layers to mapbox layers
 * @param layers the layers to be converted
 * @param layerData extra layer information
 * @param layerOrder the order by which we should convert layers
 * @returns {*}
 */
function generateMapboxLayers() {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var layerData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var layerOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (layerData.length > 0) {
    return layerOrder.slice().reverse().reduce(function (overlays, idx) {
      var layer = layers[idx];

      return layer.overlayType !== _baseLayer.OVERLAY_TYPE.mapboxgl ? overlays : [].concat((0, _toConsumableArray3.default)(overlays), [{
        id: layer.id,
        data: layerData[idx].data,
        config: layerData[idx].config,
        datasetId: layer.config.dataId
      }]);
    }, []);
  }

  return [];
} // Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

;

/**
 * Update mapbox layers on the given map
 * @param map
 * @param newLayers Array of new mapbox layers to be displayed
 * @param oldLayers Map of the old layers to be compare with the current ones to detect deleted layers
 *                  {layerId: datasetId}
 * @param mapLayers carries information about split map view
 */
function updateMapboxLayers(map) {
  var newLayers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var oldLayers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var mapLayers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var opt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { force: true };

  // delete non existing layers
  if (oldLayers) {
    var oldLayersKeys = Object.keys(oldLayers);
    if (newLayers.length === 0 && oldLayersKeys.length > 0) {
      oldLayersKeys.forEach(function (layerId) {
        return map.removeLayer(layerId);
      });
    } else {
      // remove layers
      var currentLayersIds = newLayers.reduce(function (final, layer) {
        return (0, _extends6.default)({}, final, (0, _defineProperty3.default)({}, layer.id, true));
      }, {});

      var layersToDelete = oldLayersKeys.reduce(function (final, layerId) {
        // if layer doesn't exists anymore
        if (!currentLayersIds[layerId]) {
          return (0, _extends6.default)({}, final, (0, _defineProperty3.default)({}, layerId, oldLayers[layerId]));
        }
        return final;
      }, []);
      Object.keys(layersToDelete).forEach(function (layerId) {
        return map.removeLayer(layerId);
      });
    }
  }

  // insert or update newlayer
  newLayers.forEach(function (overlay) {
    var layerId = overlay.id,
        config = overlay.config,
        data = overlay.data,
        datasetId = overlay.datasetId;

    if (!data && !config) {
      return;
    }
    var isAvailableAndVisible = !(mapLayers && mapLayers[layerId]) || mapLayers[layerId].isVisible;
    // checking if source already exists

    if (data && isAvailableAndVisible) {
      var source = map.getSource(datasetId);
      if (!source) {
        map.addSource(datasetId, {
          type: 'geojson',
          data: data
        });
      } else {
        source.setData(data);
      }
    }

    var oldConfig = oldLayers[layerId];
    var mapboxLayer = map.getLayer(layerId);
    // compare with previous configs

    if (!oldConfig || oldConfig !== config || !mapboxLayer || opt.force) {
      // check if layer already is set
      // remove it if exists
      if (mapboxLayer) {
        map.removeLayer(layerId);
      }
      // add if visible and available
      if (isAvailableAndVisible) {
        map.addLayer(config);
      }
    }
  });
  // TODO: think about removing sources
};

/**
 *
 * @param points
 * @param columns {
 * lat: {fieldIdx},
 * lng: {fieldIdx},
 * alt: {fieldIdx}
 * }
 * @param properties [{label: {fieldIdx}]
 * @returns {{type: string, properties: {}, features: {type: string, properties: {}, geometry: {type: string, coordinates: *[]}}[]}}
 */
function geojsonFromPoints() {
  var allData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var filteredIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var columns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  return {
    type: 'FeatureCollection',
    features: filteredIndex.map(function (index) {
      return allData[index];
    }).map(function (point) {
      return {
        type: 'Feature',
        properties: properties.reduce(function (final, property) {
          return (0, _extends6.default)({}, final, (0, _defineProperty3.default)({}, property.name, point[property.tableFieldIndex - 1]));
        }, {}),
        geometry: {
          type: 'Point',
          coordinates: [columns.lng ? point[columns.lng.fieldIdx] : null, // lng
          columns.lat ? point[columns.lat.fieldIdx] : null, // lat
          columns.altitude ? point[columns.altitude.fieldIdx] : 0 // altitude
          ]
        }
      };
    })
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,