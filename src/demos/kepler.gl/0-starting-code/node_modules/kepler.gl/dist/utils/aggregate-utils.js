'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aggregate = aggregate;

var _d3Array = require('d3-array');

var _defaultSettings = require('../constants/default-settings');

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function aggregate(data, technique) {
  switch (technique) {
    case _defaultSettings.AGGREGATION_TYPES.average:
      return (0, _d3Array.mean)(data);
    case _defaultSettings.AGGREGATION_TYPES.countUnique:
      return Object.keys(data.reduce(function (uniques, val) {
        uniques[val] = true;
        return uniques;
      }, {})).length;
    case _defaultSettings.AGGREGATION_TYPES.maximum:
      return (0, _d3Array.max)(data);
    case _defaultSettings.AGGREGATION_TYPES.minimum:
      return (0, _d3Array.min)(data);
    case _defaultSettings.AGGREGATION_TYPES.median:
      return (0, _d3Array.median)(data);
    case _defaultSettings.AGGREGATION_TYPES.sum:
      return (0, _d3Array.sum)(data);
    default:
      return data.length;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hZ2dyZWdhdGUtdXRpbHMuanMiXSwibmFtZXMiOlsiYWdncmVnYXRlIiwiZGF0YSIsInRlY2huaXF1ZSIsIkFHR1JFR0FUSU9OX1RZUEVTIiwiYXZlcmFnZSIsImNvdW50VW5pcXVlIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInVuaXF1ZXMiLCJ2YWwiLCJsZW5ndGgiLCJtYXhpbXVtIiwibWluaW11bSIsIm1lZGlhbiIsInN1bSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUF1QmdCQSxTLEdBQUFBLFM7O0FBSGhCOztBQUNBOztBQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLTyxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsU0FBekIsRUFBb0M7QUFDekMsVUFBUUEsU0FBUjtBQUNFLFNBQUtDLG1DQUFrQkMsT0FBdkI7QUFDRSxhQUFPLG1CQUFLSCxJQUFMLENBQVA7QUFDRixTQUFLRSxtQ0FBa0JFLFdBQXZCO0FBQ0UsYUFBT0MsT0FBT0MsSUFBUCxDQUNMTixLQUFLTyxNQUFMLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxHQUFWLEVBQWtCO0FBQzVCRCxnQkFBUUMsR0FBUixJQUFlLElBQWY7QUFDQSxlQUFPRCxPQUFQO0FBQ0QsT0FIRCxFQUdHLEVBSEgsQ0FESyxFQUtMRSxNQUxGO0FBTUYsU0FBS1IsbUNBQWtCUyxPQUF2QjtBQUNFLGFBQU8sa0JBQUlYLElBQUosQ0FBUDtBQUNGLFNBQUtFLG1DQUFrQlUsT0FBdkI7QUFDRSxhQUFPLGtCQUFJWixJQUFKLENBQVA7QUFDRixTQUFLRSxtQ0FBa0JXLE1BQXZCO0FBQ0UsYUFBTyxxQkFBT2IsSUFBUCxDQUFQO0FBQ0YsU0FBS0UsbUNBQWtCWSxHQUF2QjtBQUNFLGFBQU8sa0JBQUlkLElBQUosQ0FBUDtBQUNGO0FBQ0UsYUFBT0EsS0FBS1UsTUFBWjtBQW5CSjtBQXFCRCIsImZpbGUiOiJhZ2dyZWdhdGUtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge21pbiwgbWF4LCBtZWFuLCBtZWRpYW4sIHN1bX0gZnJvbSAnZDMtYXJyYXknO1xuaW1wb3J0IHtBR0dSRUdBVElPTl9UWVBFU30gZnJvbSAnY29uc3RhbnRzL2RlZmF1bHQtc2V0dGluZ3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWdncmVnYXRlKGRhdGEsIHRlY2huaXF1ZSkge1xuICBzd2l0Y2ggKHRlY2huaXF1ZSkge1xuICAgIGNhc2UgQUdHUkVHQVRJT05fVFlQRVMuYXZlcmFnZTpcbiAgICAgIHJldHVybiBtZWFuKGRhdGEpO1xuICAgIGNhc2UgQUdHUkVHQVRJT05fVFlQRVMuY291bnRVbmlxdWU6XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoXG4gICAgICAgIGRhdGEucmVkdWNlKCh1bmlxdWVzLCB2YWwpID0+IHtcbiAgICAgICAgICB1bmlxdWVzW3ZhbF0gPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB1bmlxdWVzO1xuICAgICAgICB9LCB7fSlcbiAgICAgICkubGVuZ3RoO1xuICAgIGNhc2UgQUdHUkVHQVRJT05fVFlQRVMubWF4aW11bTpcbiAgICAgIHJldHVybiBtYXgoZGF0YSk7XG4gICAgY2FzZSBBR0dSRUdBVElPTl9UWVBFUy5taW5pbXVtOlxuICAgICAgcmV0dXJuIG1pbihkYXRhKTtcbiAgICBjYXNlIEFHR1JFR0FUSU9OX1RZUEVTLm1lZGlhbjpcbiAgICAgIHJldHVybiBtZWRpYW4oZGF0YSk7XG4gICAgY2FzZSBBR0dSRUdBVElPTl9UWVBFUy5zdW06XG4gICAgICByZXR1cm4gc3VtKGRhdGEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZGF0YS5sZW5ndGg7XG4gIH1cbn1cbiJdfQ==