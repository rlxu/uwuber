"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var tasks_1 = require("../../../src/tasks");
var list_1 = require("../../list");
ava_1.default('Eagerly adding an item', function (t) {
    var newItem = '123';
    var state = list_1.listReducer(undefined, list_1.CHANGE_INPUT(newItem));
    t.is(state.inputValue, newItem);
    var addItemState = list_1.listReducer(state, list_1.ADD_ITEM_EAGER());
    t.true(addItemState.isLoading);
    t.deepEqual(addItemState.items, ['hi', '123']);
    var tasks = tasks_1.drainTasksForTesting();
    t.is(tasks.length, 1);
    var xhrTask = tasks[0];
    t.deepEqual(xhrTask.payload, {
        url: '/api/add-item',
        json: { item: newItem }
    });
    t.is(xhrTask.type, 'XHR_TASK');
    var successState = list_1.listReducer(addItemState, tasks_1.succeedTaskInTest(xhrTask));
    t.false(successState.isLoading);
    t.is(successState.error, '');
    var errorMsg = 'It broke!';
    var rollbackState = list_1.listReducer(addItemState, tasks_1.errorTaskInTest(xhrTask, errorMsg));
    t.false(rollbackState.isLoading);
    t.is(rollbackState.error, errorMsg);
    t.deepEqual(rollbackState.items, ['hi']);
});
ava_1.default('Pessimistically adding an item', function (t) {
    var newItem = '123';
    var state = list_1.listReducer(undefined, list_1.CHANGE_INPUT(newItem));
    t.is(state.inputValue, newItem);
    var addItemState = list_1.listReducer(state, list_1.ADD_ITEM());
    t.true(addItemState.isLoading);
    t.deepEqual(addItemState.items, ['hi']);
    var tasks = tasks_1.drainTasksForTesting();
    t.is(tasks.length, 1);
    var xhrTask = tasks[0];
    t.deepEqual(xhrTask.payload, {
        url: '/api/add-item',
        json: { item: newItem }
    });
    t.is(xhrTask.type, 'XHR_TASK');
    var successState = list_1.listReducer(addItemState, tasks_1.succeedTaskInTest(xhrTask));
    t.false(successState.isLoading);
    t.is(successState.error, '');
    t.deepEqual(successState.items, ['hi', '123']);
    var errorMsg = 'It broke!';
    var rollbackState = list_1.listReducer(addItemState, tasks_1.errorTaskInTest(xhrTask, errorMsg));
    t.false(rollbackState.isLoading);
    t.is(rollbackState.error, errorMsg);
    t.deepEqual(rollbackState.items, ['hi']);
});
//# sourceMappingURL=list-reducer.spec.js.map