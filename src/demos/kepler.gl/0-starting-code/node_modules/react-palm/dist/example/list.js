"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("../src/react");
var tasks_1 = require("../src/tasks");
var xhr_1 = require("./tasks/xhr");
exports.CHANGE_INPUT = function (value) { return ({ type: exports.CHANGE_INPUT, payload: { value: value } }); };
exports.ADD_ITEM = function () { return ({ type: exports.ADD_ITEM }); };
exports.ADD_ITEM_SUCCESS = function () { return ({ type: exports.ADD_ITEM_SUCCESS }); };
exports.ADD_ITEM_ERROR = function (error) { return ({ type: exports.ADD_ITEM_ERROR, payload: { error: error } }); };
exports.ADD_ITEM_EAGER = function () { return ({ type: exports.ADD_ITEM_EAGER }); };
exports.ROLLBACK = function (_a) {
    var error = _a.error, previousState = _a.previousState;
    return ({ type: exports.ROLLBACK, payload: { error: error, previousState: previousState } });
};
exports.ADD_ITEM_EAGER_SUCCESS = function () { return ({ type: exports.ADD_ITEM_EAGER_SUCCESS }); };
var INITIAL_STATE = {
    items: ['hi'],
    error: '',
    inputValue: '',
    isLoading: false
};
exports.listReducer = function (state, action) {
    if (state === void 0) { state = INITIAL_STATE; }
    var item = state.inputValue;
    switch (action.type) {
        case exports.CHANGE_INPUT:
            return __assign({}, state, { inputValue: action.payload.value });
        case exports.ADD_ITEM:
            return tasks_1.withTask(__assign({}, state, { isLoading: true }), xhr_1.XHR_TASK({
                url: '/api/add-item',
                json: { item: item }
            }).bimap(exports.ADD_ITEM_SUCCESS, exports.ADD_ITEM_ERROR));
        case exports.ADD_ITEM_SUCCESS:
            return __assign({}, state, { items: state.items.concat([item]), error: '', isLoading: false });
        case exports.ADD_ITEM_ERROR:
            return __assign({}, state, { error: action.payload.error, isLoading: false });
        // Here's the same example with eager updates and rollback
        case exports.ADD_ITEM_EAGER:
            return tasks_1.withTask(__assign({}, state, { items: state.items.concat([item]), isLoading: true }), xhr_1.XHR_TASK({
                url: '/api/add-item',
                json: { item: item }
            }).bimap(exports.ADD_ITEM_EAGER_SUCCESS, function (error) { return exports.ROLLBACK({ previousState: state, error: error }); }));
        case exports.ADD_ITEM_EAGER_SUCCESS:
            return __assign({}, state, { error: '', isLoading: false });
        case exports.ROLLBACK:
            return __assign({}, action.payload.previousState, { error: action.payload.error });
        default:
            return state;
    }
};
exports.ListComponent = function (_a) {
    var items = _a.items, error = _a.error, inputValue = _a.inputValue, isLoading = _a.isLoading;
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("h1", null, "List"),
        react_1.default.createElement("p", null,
            "error message: ",
            error),
        react_1.default.createElement("ul", null, items.map(function (item, index) {
            return react_1.default.createElement("li", { key: index }, item);
        })),
        react_1.default.createElement("input", { onChange: function (event) { return exports.CHANGE_INPUT(event.target.value); }, value: inputValue }),
        react_1.default.createElement("button", { id: "add-item", onClick: exports.ADD_ITEM, disabled: isLoading }, "Add item"),
        react_1.default.createElement("button", { id: "add-item-eager", onClick: exports.ADD_ITEM_EAGER, disabled: isLoading }, "Add eager item")));
};
//# sourceMappingURL=list.js.map