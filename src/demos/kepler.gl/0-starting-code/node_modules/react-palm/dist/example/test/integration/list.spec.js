"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var react_1 = require("../../../src/react");
var enzyme_1 = require("enzyme");
var redux_1 = require("redux");
var react_redux_1 = require("react-redux");
var tasks_1 = require("../../../src/tasks");
var test_utils_1 = require("../../../src/test-utils");
var list_1 = require("../../list");
ava_1.default('Pessimistically adding an item', withFixtures(function (_a) {
    var t = _a.t, wrapper = _a.wrapper, store = _a.store, fork = _a.fork;
    var newItem = '123';
    t.deepEqual(listItems(wrapper), ['hi']);
    wrapper.find('input').simulate('change', { target: { value: newItem } });
    wrapper.find('#add-item').simulate('click');
    t.deepEqual(listItems(wrapper), ['hi']);
    var tasks = tasks_1.drainTasksForTesting();
    t.is(tasks.length, 1);
    var xhrTask = tasks[0];
    assertAddItemTask(t, xhrTask, newItem);
    fork(function () {
        store.dispatch(tasks_1.succeedTaskInTest(xhrTask));
        t.deepEqual(listItems(wrapper), ['hi', newItem]);
    }, function () {
        var errMsg = 'Not works';
        store.dispatch(tasks_1.errorTaskInTest(xhrTask, errMsg));
        t.deepEqual(listItems(wrapper), ['hi']);
    });
}));
ava_1.default('Eagerly adding an item', withFixtures(function (_a) {
    var t = _a.t, wrapper = _a.wrapper, store = _a.store, fork = _a.fork;
    var newItem = '123';
    t.deepEqual(listItems(wrapper), ['hi']);
    wrapper.find('input').simulate('change', { target: { value: newItem } });
    wrapper.find('#add-item-eager').simulate('click');
    t.deepEqual(listItems(wrapper), ['hi', newItem]);
    var tasks = tasks_1.drainTasksForTesting();
    t.is(tasks.length, 1);
    var xhrTask = tasks[0];
    assertAddItemTask(t, xhrTask, newItem);
    fork(function () {
        store.dispatch(tasks_1.succeedTaskInTest(xhrTask));
        t.deepEqual(listItems(wrapper), ['hi', newItem]);
    }, function () {
        var errMsg = 'Not works';
        store.dispatch(tasks_1.errorTaskInTest(xhrTask, errMsg));
        t.deepEqual(listItems(wrapper), ['hi']);
    });
}));
function assertAddItemTask(t, task, newItem) {
    t.deepEqual(task.payload, {
        url: '/api/add-item',
        json: { item: newItem }
    });
    t.is(task.type, 'XHR_TASK');
}
function withFixtures(doSpec) {
    var _a = test_utils_1.makeForkUtil(list_1.listReducer, redux_1.createStore), store = _a.store, fork = _a.fork;
    var ConnectedApp = react_redux_1.connect(function (state) { return state; }, function (dispatch) { return ({ dispatch: dispatch }); })(list_1.ListComponent);
    var wrapper = enzyme_1.mount(react_1.default.createElement(react_redux_1.Provider, { store: store }, react_1.withDispatch(store.dispatch, react_1.default.createElement(ConnectedApp, null))));
    return function wrappedSpec(t) {
        doSpec({ t: t, store: store, wrapper: wrapper, fork: fork });
    };
}
function listItems(wrapper) {
    return wrapper.find('li').map(function (node) { return node.text(); });
}
//# sourceMappingURL=list.spec.js.map