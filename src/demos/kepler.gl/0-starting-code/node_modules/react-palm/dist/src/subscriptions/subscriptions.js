"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SUB_TYPE_TO_SCHEDULER = Symbol('SUB_TYPE_TO_SCHEDULER');
function makeSubscriptionType(type, scheduler) {
    type[SUB_TYPE_TO_SCHEDULER] = scheduler;
    return type;
}
exports.makeSubscriptionType = makeSubscriptionType;
/*
 * You need to install this middleware for tasks to have their handlers run.
 *
 * You probably do not want to use this middleware within your test environment.
 * Instead, use `drainTasksForTesting` to retrieve and make assertions about them.
 */
exports.makeSubscriptionMiddleware = function (subscribeFn) { return function (store) {
    var dispatch = store.dispatch, getState = store.getState;
    // Run scheduler for initial subscriptions
    var prevSubs = subscribeFn(getState());
    binByHandler(prevSubs).forEach(function (subs, handler) { return handler(dispatch, subs, []); });
    return function (next) { return function (action) {
        var returnValue = next(action);
        var state = getState();
        var nextSubs = subscribeFn(state);
        var _a = compareSubs(prevSubs, nextSubs), added = _a.added, removed = _a.removed;
        var addedBin = binByHandler(added), removedBin = binByHandler(removed);
        var schedulers = new Set(Array.from(addedBin.keys())
            .concat(Array.from(removedBin.keys())));
        schedulers.forEach(function (scheduler) {
            return scheduler(dispatch, addedBin.get(scheduler) || [], removedBin.get(scheduler) || []);
        });
        prevSubs = nextSubs;
        return returnValue;
    }; };
}; };
function compareSubs(prev, next) {
    var prevSubs = {};
    var added = [], removed = [];
    prev.forEach(function (sub) {
        prevSubs[serializeSubscription(sub)] = sub;
    });
    next.forEach(function (sub) {
        var serialized = serializeSubscription(sub);
        if (prevSubs[serialized]) {
            delete prevSubs[serialized];
        }
        else {
            added.push(sub);
        }
    });
    Object.keys(prevSubs).forEach(function (key) { return removed.push(prevSubs[key]); });
    return { added: added, removed: removed };
}
function binByHandler(subscriptions) {
    var bins = new Map();
    subscriptions.forEach(function (sub) {
        var handler = sub.type[SUB_TYPE_TO_SCHEDULER];
        if (bins.get(handler)) {
            bins.get(handler).push(sub);
        }
        else {
            bins.set(handler, [sub]);
        }
    });
    return bins;
}
// we already assume type is the same due to binning
function serializeSubscription(sub) {
    // TODO: revisit this
    return JSON.stringify(sub);
}
//# sourceMappingURL=subscriptions.js.map