"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var routing_1 = require("../src/routing");
var actions_1 = require("../src/actions");
var tasks_1 = require("../src/tasks");
var IndexComponent = Symbol('index');
var PostComponent = Symbol('post');
var UserComponent = Symbol('user');
var ParagraphComponent = Symbol('para');
var ROUTES = {
    post: { url: (_a = ["/users/", "/", ""], _a.raw = ["/users/", "/", ""], routing_1.u(_a, { uid: Number }, { pid: String })), component: PostComponent, childRoutes: {
            paragraph: { url: (_b = ["/paragraph/", "/", ""], _b.raw = ["/paragraph/", "/", ""], routing_1.u(_b, { paragraph: Number }, { word: Number })), component: ParagraphComponent },
            chat: { url: (_c = ["/chat/", ""], _c.raw = ["/chat/", ""], routing_1.u(_c, { cid: Number })), redirectTo: function (routes, params) { return routes.index(); } }
        } },
    user: { url: (_d = ["/users/", ""], _d.raw = ["/users/", ""], routing_1.u(_d, { uid: Number })), component: UserComponent },
    index: { url: (_e = ["/"], _e.raw = ["/"], routing_1.u(_e)), component: IndexComponent }
};
ava_1.default('uHelper should return the formatted string', function (t) {
    t.is((_a = ["/users/", ""], _a.raw = ["/users/", ""], routing_1.uHelper(_a, { uid: Number })), '/users/:uid');
    var _a;
});
ava_1.default('u should serialize and deserialize correctly params', function (t) {
    var res = (_a = ["/users/", ""], _a.raw = ["/users/", ""], routing_1.u(_a, { uid: Number }));
    t.deepEqual(res.deserialize('/users/123').params, { uid: '123' });
    t.is(res.serialize({ uid: '123' }), '/users/123');
    var _a;
});
ava_1.default('createRouter should generate urls', function (t) {
    var routes = routing_1.createRouter(ROUTES).routes;
    t.is(routes.user({ uid: '123' }), '/users/123');
});
ava_1.default('createRouter should generate urls with child routes', function (t) {
    var routes = routing_1.createRouter(ROUTES).routes;
    t.is(routes.post({ uid: 123, pid: 2 })(), '/users/123/2');
    t.is(routes.post({ uid: 123, pid: 2 }).paragraph({ paragraph: 1, word: 42 }), '/users/123/2/paragraph/1/42');
});
ava_1.default('router location change handler should update path and routes', function (t) {
    var _a = routing_1.createRouter(ROUTES), routes = _a.routes, handlers = _a.handlers, INITIAL_STATE = _a.INITIAL_STATE, LOCATION_CHANGE = _a.LOCATION_CHANGE;
    t.is(INITIAL_STATE.path, '', 'The initial path should be empty');
    t.deepEqual(INITIAL_STATE.routes, [], 'The matched routes array should be empty');
    var reducer = actions_1.handleActions(handlers, INITIAL_STATE);
    var index = reducer(INITIAL_STATE, LOCATION_CHANGE('/'));
    t.is(index.path, '/');
    t.deepEqual(index.routes, [{ component: IndexComponent, params: {} }]);
    var paragraph = reducer(INITIAL_STATE, LOCATION_CHANGE('/users/1/25/paragraph/10/42'));
    t.is(paragraph.path, '/users/1/25/paragraph/10/42');
    t.deepEqual(paragraph.routes, [
        { component: PostComponent, params: { uid: '1', pid: '25' } },
        { component: ParagraphComponent, params: { paragraph: '10', word: '42' } }
    ]);
    var paragraphTwo = reducer(paragraph, LOCATION_CHANGE('/users/1/25/paragraph/2/1'));
    t.is(paragraphTwo.path, '/users/1/25/paragraph/2/1');
    t.deepEqual(paragraphTwo.routes, [
        { component: PostComponent, params: { uid: '1', pid: '25' } },
        { component: ParagraphComponent, params: { paragraph: '2', word: '1' } }
    ]);
});
ava_1.default('history push action should update the path, routes and create a task', function (t) {
    var _a = routing_1.createRouter(ROUTES), routes = _a.routes, handlers = _a.handlers, INITIAL_STATE = _a.INITIAL_STATE, HISTORY_PUSH = _a.HISTORY_PUSH;
    var reducer = actions_1.handleActions(handlers, INITIAL_STATE);
    var indexUrl = '/';
    var index = reducer(INITIAL_STATE, HISTORY_PUSH(indexUrl));
    var indexTasks = tasks_1.drainTasksForTesting();
    t.is(indexTasks.length, 1);
    t.is(indexTasks[0].type, 'HISTORY_PUSH_TASK');
    t.is(indexTasks[0].payload.url, indexUrl);
    t.is(index.path, '/');
    t.deepEqual(index.routes, [{ component: IndexComponent, params: {} }]);
    var paragraphUrl = '/users/1/25/paragraph/10/42';
    var paragraph = reducer(index, HISTORY_PUSH(paragraphUrl));
    var paraTasks = tasks_1.drainTasksForTesting();
    t.is(paraTasks.length, 1);
    t.is(paraTasks[0].type, 'HISTORY_PUSH_TASK');
    t.is(paraTasks[0].payload.url, paragraphUrl);
    t.deepEqual(paragraph.routes, [
        { component: PostComponent, params: { uid: '1', pid: '25' } },
        { component: ParagraphComponent, params: { paragraph: '10', word: '42' } }
    ]);
});
var _a, _b, _c, _d, _e;
//# sourceMappingURL=routing.spec.js.map