"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ava_1 = require("ava");
var enzyme_1 = require("enzyme");
var sinon_1 = require("sinon");
var link_1 = require("../src/routing/link");
var doWrap = function (props, context) {
    if (props === void 0) { props = { to: '#' }; }
    if (context === void 0) { context = {}; }
    return enzyme_1.mount(React.createElement(link_1.default, __assign({}, props)), { context: context });
};
ava_1.default('Should mount the Link component', function (t) {
    var wrap = doWrap();
    t.is(wrap.length, 1, 'The component should be mounted');
    t.is(wrap.find('a').prop('href'), '#', 'The default href should be #');
    t.is(wrap.find('a').prop('target'), '_self', 'The default target should be self');
});
ava_1.default('Should pass the href and other extra link props', function (t) {
    var to = '/yolo';
    var target = '_blank';
    var wrap = doWrap({ to: to, target: target });
    t.is(wrap.find('a').prop('href'), to, 'The to should have been passed as the href');
    t.is(wrap.find('a').prop('target'), target, 'The target should have been passed as the href');
    t.is(wrap.find('a').prop('rel'), 'noopener noreferrer', 'It should have added security rels');
});
ava_1.default('Should test the click behavior', function (t) {
    var onClick = sinon_1.spy();
    var dispatch = sinon_1.spy();
    var wrap = doWrap({ onClick: onClick, to: '/home' }, { dispatch: dispatch });
    wrap.simulate('click', { button: 0 });
    t.truthy(onClick.calledOnce, 'The onClick handler should have been callled');
    var event = onClick.args[0][0];
    t.truthy(event, 'The event should be there');
    t.is(event.type, 'click', 'And be a click type');
    t.truthy(event.defaultPrevented, 'The default event should have been prevented');
    t.truthy(dispatch.calledOnce, 'The dispatch should have been called');
    t.is(dispatch.args[0][0].type.toString().toString(), 'Symbol(HISTORY_PUSH)', 'With a push action');
});
ava_1.default('Default link behavior for external urls', function (t) {
    var urls = [
        'http://google.com',
        'https://google.com',
        'ftp://google.com',
        'mailto:bgronon@gmail.com',
        '//yolo',
    ];
    urls.forEach(function (url) {
        var onClick = sinon_1.spy();
        var wrap = doWrap({ onClick: onClick, to: url }, { dispatch: function (f) { return f; } });
        wrap.simulate('click', { button: 0 });
        var event = onClick.args[0][0];
        t.falsy(event.defaultPrevented, "The link should open " + url + " with the default link behavior");
    });
});
//# sourceMappingURL=link.spec.js.map