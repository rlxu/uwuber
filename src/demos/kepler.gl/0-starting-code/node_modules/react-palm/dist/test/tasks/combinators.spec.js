"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var tasks_1 = require("../../src/tasks");
var fixtures_1 = require("./fixtures");
function spy(payload, success) {
    return Promise.resolve(success(payload));
}
;
var ECHO_TASK = tasks_1.taskCreator(spy, 'ECHO_TASK');
var appendB = function (x) { return x + "b"; };
var appendC = function (x) { return x + "c"; };
ava_1.default('t.map(f).map(g) === t.map(x => g(f(x)))', function (t) {
    var T1 = ECHO_TASK('out').map(appendB).map(appendC);
    var T2 = ECHO_TASK('out').map(function (x) { return appendC(appendB(x)); });
    var r1 = tasks_1.succeedTaskInTest(T1, 'a');
    var r2 = tasks_1.succeedTaskInTest(T2, 'a');
    t.is(r1, r2);
});
ava_1.default('Task.all([t.map(f)]) === Task.all([t]).map([r] => f(r))', function (t) {
    function first(list) {
        return list[0];
    }
    var T1 = tasks_1.Task.all([ECHO_TASK('out').map(appendB)]).map(first);
    var T2 = tasks_1.Task.all([ECHO_TASK('out')]).map(function (_a) {
        var r = _a[0];
        return appendB(r);
    });
    var r1 = tasks_1.succeedTaskInTest(T1, 'a');
    var r2 = tasks_1.succeedTaskInTest(T2, 'a');
    t.is(r1, r2);
});
ava_1.default.cb('Task.all creates a new task which runs its delegates', function (t) {
    var MULTI_TASK = tasks_1.Task.all([
        ECHO_TASK('1'),
        ECHO_TASK('2'),
        ECHO_TASK('3')
    ]).map(fixtures_1.SET_SYNC);
    var reducer = function (state, action) {
        if (state === void 0) { state = []; }
        return action.type === fixtures_1.ADD ?
            tasks_1.withTask(state, MULTI_TASK) :
            action.type === fixtures_1.SET_SYNC ?
                action.payload :
                state;
    };
    var store = fixtures_1.taskStore(reducer);
    t.is(MULTI_TASK.type, 'Task.all(ECHO_TASK, ECHO_TASK, ECHO_TASK)');
    // TODO: lol double cast
    store.dispatch(fixtures_1.ADD(1)).then(function (_) {
        t.deepEqual(store.getState(), ['1', '2', '3']);
        t.end();
    });
});
ava_1.default.cb('Task.all resolves with an empty array', function (t) {
    var MULTI_TASK = tasks_1.Task.all([]).map(fixtures_1.SET_SYNC);
    var reducer = function (state, action) {
        if (state === void 0) { state = ['1', '2', '3']; }
        return action.type === fixtures_1.ADD ?
            tasks_1.withTask(state, MULTI_TASK) :
            action.type === fixtures_1.SET_SYNC ?
                action.payload :
                state;
    };
    var store = fixtures_1.taskStore(reducer);
    t.is(MULTI_TASK.type, 'Task.all()');
    // TODO: lol double cast
    store.dispatch(fixtures_1.ADD(1)).then(function (_) {
        t.deepEqual(store.getState(), []);
        t.end();
    });
});
ava_1.default.cb('Task.map works in a real store', function (t) {
    var MAP_TASK = ECHO_TASK('5').map(function (x) { return x + 1; }).map(fixtures_1.SET_SYNC);
    var reducer = function (state, action) {
        if (state === void 0) { state = 0; }
        return action.type === fixtures_1.ADD ?
            tasks_1.withTask(state, MAP_TASK) :
            action.type === fixtures_1.SET_SYNC ?
                action.payload :
                state;
    };
    var store = fixtures_1.taskStore(reducer);
    // TODO: lol double cast
    store.dispatch(fixtures_1.ADD(1)).then(function (_) {
        t.deepEqual(store.getState(), '51');
        t.end();
    });
});
ava_1.default.cb('Task.chain works with a real store', function (t) {
    var CHAIN_TASK = ECHO_TASK('Balthazar')
        .chain(function (result) { return ECHO_TASK("Hello " + result); })
        .map(fixtures_1.SET_SYNC);
    var reducer = function (state, action) {
        if (state === void 0) { state = 0; }
        return action.type === fixtures_1.ADD ?
            tasks_1.withTask(state, CHAIN_TASK) :
            action.type === fixtures_1.SET_SYNC ?
                action.payload :
                state;
    };
    var store = fixtures_1.taskStore(reducer);
    // TODO: lol double cast
    store.dispatch(fixtures_1.ADD(1)).then(function (_) {
        t.deepEqual(store.getState(), 'Hello Balthazar');
        t.end();
    });
});
ava_1.default('Task.chain works with succeedTaskInTest', function (t) {
    var task = ECHO_TASK('');
    var chainTask = task.chain(function (who) { return ECHO_TASK("Hello " + who); });
    t.is(chainTask.type, 'Chain(ECHO_TASK)');
    var unchainedTask = tasks_1.succeedTaskInTest(chainTask, 'Balthazar');
    t.is(unchainedTask.type, 'ECHO_TASK');
    t.is(unchainedTask.payload, 'Hello Balthazar');
    t.is(tasks_1.succeedTaskInTest(unchainedTask, 'Result'), 'Result');
});
//# sourceMappingURL=combinators.spec.js.map